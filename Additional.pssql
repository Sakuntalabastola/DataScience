-- Database: cricket

-- DROP DATABASE IF EXISTS cricket;

CREATE DATABASE cricket
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_India.1252'
    LC_CTYPE = 'English_India.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;
	
	create table Deliverie(
	id int,
	inning int,
	over int,
	ball int,
	batsman varchar(100),
	non_striker varchar(50),
	bowler varchar(50),
	batsman_runs int,
	extra_runs int,
	total_runs int,
	is_wicket varchar(10),
	dismissal_kind varchar(10),	
	player_dismissed varchar(10),
	fielder varchar(10),
	extras_type varchar(10),
	batting_team varchar(100),
	bowling_team varchar(100)

	)
select * from Deliverie;
copy Deliverie from 'E:\sql project\IPL_Ball.csv' with csv header;
truncate table Deliverie

create table Matches(
id int,
neutral_venue int,
match_date TIMESTAMP,
season date,
city varchar(100),
team1 varchar(200),
team2 varchar(200),
toss_winner varchar(200),
toss_decision varchar(50),
winner varchar(100),
result varchar(50),
result_margin int,
eliminator varchar(10),
method varchar(10),
umpire1 varchar(100),
umpire2 varchar(100)
);

select * from Matches;
copy Matches from 'E:\sql project\IPL_matches.csv' header true ;
truncate table Deliverie

/*1 Get the count of cities that have hosted an IPL match */

SELECT COUNT(DISTINCT city) AS city_count
FROM matches;

/* 2 Create table deliveries_v02 with all the columns of the table ‘deliveries’ and an additional column ball_result containing 
values boundary, dot or other depending on the total_run (boundary for >= 4, dot for 0 and other for any other number) */
CREATE TABLE deliveries_v02 AS
SELECT *,
CASE
WHEN total_runs >= 4 THEN 'boundary'
WHEN total_runs = 0 THEN 'dot'
ELSE 'other'
END AS ball_result
FROM deliverie
limit 10;
select * from deliveries_v02;

/* 3 Write a query to fetch the total number of boundaries and dot balls from the deliveries_v02 table. */

SELECT
SUM(CASE WHEN ball_result = 'boundary' THEN 1 ELSE 0 END) AS total_boundaries,
SUM(CASE WHEN ball_result = 'dot' THEN 1 ELSE 0 END) AS total_dot_balls
FROM deliveries_v02;

/* 4 Write a query to fetch the total number of boundaries scored by each team from the deliveries_v02 table and order it in 
descending order of the number of boundaries scored. */

SELECT batsman_runs,
       COUNT(*) AS total_boundaries
FROM deliveries_v02
WHERE total_runs IN (4, 6) 
GROUP BY batsman_runs
ORDER BY total_boundaries DESC;

/* 5 Write a query to fetch the total number of dot balls bowled by each team and order it in descending order of the total number
of dot balls bowled. */

SELECT batsman_runs,
       COUNT(*) AS total_dot_balls
FROM deliveries_v02
WHERE total_runs = 0 
GROUP BY batsman_runs
ORDER BY total_dot_balls DESC;

/*6 Write a query to fetch the total number of dismissals by dismissal kinds where dismissal kind is not NA */

SELECT dismissal_kind,
       COUNT(*) AS total_dismissals
FROM deliveries_v02
WHERE dismissal_kind != 'NA'
GROUP BY dismissal_kind
ORDER BY total_dismissals DESC;

/* 7 Write a query to get the top 5 bowlers who conceded maximum extra runs from the deliveries table */

SELECT bowler,
       SUM(extra_runs) AS total_extra_runs
FROM deliverie
GROUP BY bowler
ORDER BY total_extra_runs DESC
LIMIT 5;

/* 8 Write a query to create a table named deliveries_v03 with all the columns of deliveries_v02 table and two additional 
column (named venue and match_date) of venue and date from table matches. */

CREATE TABLE deliveries_v03 AS
SELECT dv02.*, a.neutral_venue, a.match_date
FROM deliveries_v02 AS dv02
JOIN matches AS a ON dv02.id = a.id;

select * from deliveries_v03;

/* 9 Write a query to fetch the total runs scored for each venue and order it in the descending order of total runs scored. */
 SELECT
  batsman,
  neutral_venue,
  SUM(total_runs) AS total_runs_scored
FROM deliveries_v03
GROUP BY batsman, neutral_venue
ORDER BY total_runs_scored DESC;

/* 10 Write a query to fetch the year-wise total runs scored at Eden Gardens and order it in the descending order of total runs scored.*/

SELECT EXTRACT(YEAR FROM match_date) AS year,
       SUM(deliverie.total_runs) AS total_runs_scored
FROM matches
JOIN deliverie ON matches.id = deliverie.id
WHERE city = 'Delhi' ---- Eden Gardens could not found
GROUP BY EXTRACT(YEAR FROM match_date)
ORDER BY total_runs_scored DESC;

CREATE TABLE IPL_Ball as 
select 
*
from
deliverie
WHERE id >= '335981';
copy IPL_Ball from 'E:\sql project\IPL_Ball.csv' with csv header;


CREATE TABLE IPL_matches as 
select 
*
from
matches;
copy IPL_matches from 'E:\sql project\IPL_matches.csv' with csv header;

select * from IPL_Ball;
select * from IPL_matches;

/* 1 Your first priority is to get 2-3 players with high S.R who have faced at least 500 balls.And to do that you have to make a 
list of 10 players you want to bid in the auction so that when you try to grab them in auction you should not pay the amount
greater than you have in the purse for a particular player. */

SELECT batsman, strike_rate
FROM IPL_Ball
WHERE strike_rate >= 500
ORDER BY Strike_Rate DESC
LIMIT 10;

select * from IPL_Ball

/* 2 Now you need to get 2-3 players with good Average who have played more the 2 ipl seasons.And to do that you have to make a list
of 10 players you want to bid in the auction so that when you try to grab them in auction you should not pay the amount greater 
than you have in the purse for a particular player.*/
WITH PlayerStats AS (
    SELECT 
        ib.batsman,
        COUNT(DISTINCT im.season) AS seasons_played,
        SUM(ib.batsman_runs) AS total_runs,
        COUNT(*) AS total_innings,
        SUM(CASE WHEN ib.is_wicket = 1 THEN 1 ELSE 0 END) AS total_outs
    FROM 
        ipl_ball ib
    INNER JOIN 
        ipl_matches im ON ib.id = im.id
    GROUP BY 
        ib.batsman
    HAVING 
        COUNT(DISTINCT im.season) > 2  
        AND COUNT(*) > 28 
),
PlayerAverages AS (
    SELECT 
        batsman,
        total_runs,
        total_outs,
        total_innings,
        CASE 
            WHEN total_outs > 0 THEN total_runs::decimal / total_outs
            ELSE NULL
        END AS batting_average
    FROM 
        PlayerStats
)
SELECT 
    batsman,
    total_runs,
    total_outs,
    total_innings,
    batting_average
FROM 
    PlayerAverages
ORDER BY 
    batting_average DESC
LIMIT 3;

/* 3 Now you need to get 2-3 Hard-hitting players who have scored most runs in boundaries and have played more the 2 ipl season. To do 
that you have to make a list of 10 players you want to bid in the auction so that when you try to grab them in auction you should not 
pay the amount greater than you have in the purse for a particular player. */
 
 WITH BoundaryScorers AS (
    SELECT 
        ib.batsman AS player_name,
        COUNT(*) AS boundary_count,
        SUM(CASE WHEN ib.batsman_runs IN (4, 6) THEN ib.batsman_runs ELSE 0 END) AS boundary_runs
    FROM 
        IPL_ball ib
    JOIN 
        IPL_matches im ON ib.id = im.id
    GROUP BY 
        ib.batsman
    HAVING 
        COUNT(DISTINCT im.season) > 2
)
SELECT 
    *
FROM 
    BoundaryScorers
ORDER BY 
    boundary_runs DESC
LIMIT 3;

 /* 4 Your first priority is to get 2-3 bowlers with good economy who have bowled at least 500 balls in IPL so far.To do that you have 
to make a list of 10 players you want to bid in the auction so that when you try to grab them in auction you should not pay the amount 
greater than you have in the purse for a particular player.*/ 
 WITH BowlerStats AS (
    SELECT 
        bowler,
 		COUNT(*) AS balls_bowled,
        SUM(total_runs - extra_runs) AS runs_conceded
    FROM 
        IPL_ball
    WHERE 
        is_wicket = 0
    GROUP BY 
        bowler
    HAVING 
        COUNT(*) >= 10    -- 500 not found
),
BowlerEconomy AS (
    SELECT 
        bs.bowler,
        bs.balls_bowled,
        bs.runs_conceded,
        (bs.runs_conceded::numeric / bs.balls_bowled) AS economy_rate
    FROM 
        BowlerStats bs
)
SELECT 
    be.bowler,
    be.balls_bowled,
    be.runs_conceded,
    be.economy_rate
FROM 
    BowlerEconomy be
WHERE 
    be.economy_rate > 0  
ORDER BY 
    be.economy_rate ASC
LIMIT 3;

/* 5 Now you need to get 2-3 bowlers with the best strike rate and who have bowled at least 500 balls in IPL so far.To do that you have
to make a list of 10 players you want to bid in the auction so that when you try to grab them in auction you should not pay the amount
greater than you have in the purse for a particular player. */

WITH BowlerStats AS (
    SELECT 
        bowler,
        COUNT(*) AS balls_bowled,
        COUNT(DISTINCT id) AS matches_played
    FROM 
        IPL_ball
    WHERE 
        is_wicket = 0
    GROUP BY 
        bowler
    HAVING 
        COUNT(*) >= 10  -- Bowlers who have bowled at least 10 balls
),
BowlerStrikeRate AS (
    SELECT 
        bs.bowler,
        bs.balls_bowled,
        bs.matches_played,
        (CAST(bs.balls_bowled AS numeric) / bs.matches_played) AS strike_rate
    FROM 
        BowlerStats bs
)
SELECT 
    bsr.bowler,
    bsr.balls_bowled,
    bsr.matches_played,
    bsr.strike_rate
FROM 
    BowlerStrikeRate bsr
ORDER BY 
    bsr.strike_rate ASC
LIMIT 3;
/* 6 Now you need to get 2-3 All_rounders with the best batting as well as bowling strike rate and who have faced at least 500 balls in
IPL so far and have bowled minimum 300 balls.To do that you have to make a list of 10 players you want to bid in the auction so that
when you try to grab them in auction you should not pay the amount greater than you have in the purse for a particular player. */
SELECT 
        id AS player_id,
        COUNT(*) FILTER (WHERE is_wicket = 0 AND batsman_runs > 0) AS runs_scored,
        COUNT(*) FILTER (WHERE is_wicket = 1) AS wickets_taken,
        COUNT(*) AS balls_faced,
        SUM(total_runs - extra_runs) AS runs_conceded,
        strike_rate,--COUNT(*) FILTER (WHERE is_wicket = 0 AND batsman_runs > 0) / NULLIF(COUNT(*) FILTER (WHERE is_wicket = 0), 0) AS batting_strike_rate,
        COUNT(*) FILTER (WHERE is_wicket = 1) / NULLIF(COUNT(*), 0) AS bowling_strike_rate
    FROM 
        IPL_ball
    GROUP BY 
        id, strike_rate
    HAVING 
        COUNT(*) >= 10
		AND COUNT(*) FILTER (WHERE ball IS NOT NULL) >= 10  
	  limit 3;
		
/* 7 After doing all that you have the list of all the players you are going to bid in the auction so create a visual representation 
in the form of graphs , tables and charts to present in front of team management before the auction. */




 









